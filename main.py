from config import api_key_bot, admin_id
from request_db import select_user_id, select_deposit, insert_deposit, insert_first_deposit, \
                        select_amount_ton, insert_total_ton, update_total_ton
from parser_ton import parse_currency

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

import asyncio
import logging
from datetime import date


bot = Bot(token=api_key_bot)
dp = Dispatcher(bot,storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

#logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='start')
async def command_start(message: types.Message):

    button_add_deposit = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', callback_data="/add_dep")
    button_del_deposit = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', callback_data="/del_dep")
    button_view_deposit = InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data="/view_dep")
    button_view_rate_ton = InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å TON', callback_data="/rate_ton")
    button_ton_in_rub = InlineKeyboardButton('TON > RUB', callback_data="/calculate")
    button_help = InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data="/help")
    markup_deposit = InlineKeyboardMarkup()
    markup_deposit.row(button_add_deposit, button_del_deposit, button_view_deposit)
    markup_deposit.add(button_view_rate_ton, button_ton_in_rub)
    markup_deposit.add(button_help)

    if select_user_id(message.from_user.id) == 0:
        print('–Æ–∑–µ—Ä —Ç–æ–ª—å–∫–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–µ–ª')
        await message.reply(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ @{message.from_user.username}. –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ TON Coin.\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏—Ç–µ /help', reply_markup=markup_deposit)
    elif select_user_id(message.from_user.id) == 1:
        if message.from_user.id == admin_id:
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç @{message.from_user.username}. –Ø –Ω–∞–¥–µ—é—Å—å —Ç—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?', reply_markup=markup_deposit)
        else:
            await message.reply(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, @{message.from_user.username}, —è –Ω–∞–¥–µ—é—Å—å –í—ã –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —è —É–º–µ—é?\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /help', reply_markup=markup_deposit)

@dp.callback_query_handler(text='/help')
async def callback_help(callback_query: types.CallbackQuery):
    await callback_query.message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.üëã\n–í –º–æ–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –Ω–µ–º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É—á–µ—Ç–∞ –≤–ª–æ–∂–µ–Ω–∏–π –≤ TON Coin.ü§è\n'
                                        '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ–Ω—é üëâ/start.\n'
                                        '1Ô∏è‚É£–ï—Å–ª–∏ –í—ã –∫—É–ø–∏–ª–∏ TON –∏ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç"\n'
                                        '2Ô∏è‚É£–ï—Å–ª–∏ –í—ã –ø—Ä–æ–¥–∞–ª–∏ TON –∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –∏–∑ –í–∞—à–µ–≥–æ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ö—Ä–∞–Ω—è—â–µ–≥–æ—Å—è –≤–æ –º–Ω–µ –≤–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–∂–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç"\n'
                                        '3Ô∏è‚É£–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –í–∞—à–∏—Ö –º–æ–Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–∞–ª–∞–Ω—Å"\n'
                                        '4Ô∏è‚É£–¢–∞–∫–∂–µ —É –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å TON (–¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è —Å CoinMarketCup) –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–æ—è—Ç –≤—Å–µ –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∫—É—Ä—Å—É.')
    await callback_query.answer()

"""
Create algorithm add deposit
"""
class Add_deposit(StatesGroup):
    amount_ton = State()
    price_ton = State()
    total_price = State()

@dp.callback_query_handler(text='/add_dep')
async def add_deposit(callback_query: types.CallbackQuery):
    await callback_query.message.answer('–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∫—É–ø–∏–ª–∏.\nExample: 9.803171478')
    await callback_query.message.delete()
    await Add_deposit().amount_ton.set()
    await callback_query.answer()

@dp.message_handler(state=Add_deposit.amount_ton)
async def get_price_ton(message: types.Message, state: FSMContext):
    await state.update_data(amount_ton=message.text)
    await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏–º. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω TON Coin, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –µ–≥–æ –∫—É–ø–∏–ª\nExample: 57.5')
    await Add_deposit.next()

@dp.message_handler(state=Add_deposit.price_ton)
async def get_total_price(message: types.Message, state: FSMContext):
    await state.update_data(price_ton=message.text)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç—É —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∫—É–ø–∏–ª TON\nExample: 563.68')
    await Add_deposit.next()

@dp.message_handler(state=Add_deposit.total_price)
async def end_add_deposit(message: types.Message, state: FSMContext):
    if not select_amount_ton(message.from_user.id):
        await state.update_data(total_price=message.text)
        data_deposit = await state.get_data()
        insert_deposit(message.from_user.id, str(date.today()), float(data_deposit["amount_ton"]), float(data_deposit["price_ton"]), float(data_deposit["price_ton"]))
        insert_total_ton(message.from_user.id, float(data_deposit["amount_ton"]))
        await message.answer(f'@{message.from_user.username}, –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        await state.finish()
    else:
        await state.update_data(total_price=message.text)
        data_deposit = await state.get_data()
        last_total_ton = select_amount_ton(message.from_user.id)[-1][-1]
        total_ton = float(data_deposit['amount_ton']) + float(last_total_ton)
        insert_deposit(message.from_user.id, str(date.today()), float(data_deposit["amount_ton"]), float(data_deposit["price_ton"]), float(data_deposit["total_price"]))
        update_total_ton(message.from_user.id, total_ton)
        await message.answer(f'@{message.from_user.username}, –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        await state.finish()


"""
Create algorithm add deposit
"""
class Del_deposit(StatesGroup):
    amount_ton = State()

@dp.callback_query_handler(text='/del_dep')
async def add_deposit(callback_query: types.CallbackQuery):
    await callback_query.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON, –∫–æ—Ç–æ—Ä–æ–µ –í—ã –ø—Ä–æ–¥–∞–ª–∏.')
    await callback_query.message.answer('Example: 9.375')
    await Del_deposit().amount_ton.set()
    await callback_query.answer()

@dp.message_handler(state=Del_deposit.amount_ton)
async def del_deposit(message: types.Message, state: FSMContext):
    try:
        await state.update_data(amount_ton=message.text)
        data_deposit = await state.get_data()
        last_total_ton = select_amount_ton(message.from_user.id)[-1][-1]
        total_ton = float(last_total_ton) - float(data_deposit['amount_ton'])
        update_total_ton(message.from_user.id, total_ton)
        await message.answer(f'@{message.from_user.username}, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã.')
        await state.finish()
    except IndexError:
        await message.answer('–£ –≤–∞—Å —Ç—É—Ç –ø—É—Å—Ç–æ. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ...')
        await state.finish()


"""
Function views users deposit
"""
@dp.callback_query_handler(text='/view_dep')
async def view_deposits(callback_query=types.CallbackQuery):
    try:
        total_ton = select_amount_ton(callback_query.from_user.id)[-1][-1]
        await callback_query.message.answer(f'@{callback_query.from_user.username}, –≤–æ—Ç –í–∞—à –±–∞–ª–∞–Ω—Å: {total_ton} TON')
        await callback_query.answer()
    except IndexError:
        await callback_query.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã —É –º–µ–Ω—è, –ø–æ—ç—Ç–æ–º—É —É –í–∞—Å –ø–æ–∫–∞ –ø—É—Å—Ç–æ...')
        await callback_query.answer()


"""
Function view rate TON
"""
@dp.callback_query_handler(text='/rate_ton')
async def view_rate_ton(callback_query=types.CallbackQuery):
    await callback_query.message.answer(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å TON Coin —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {parse_currency()}')
    await callback_query.answer()


"""
Function calculate TON to RUB
"""
@dp.callback_query_handler(text='/calculate')
async def calculate_ton(callback_query=types.CallbackQuery):
    calculate_rub = float(parse_currency().split('‚ÇΩ')[-1]) * float(select_amount_ton(callback_query.from_user.id)[-1][-1])
    await callback_query.message.answer(f'@{callback_query.from_user.username}, —Å–µ–π—á–∞—Å –í–∞—à–∏ TON —Å—Ç–æ—è—Ç: {round(calculate_rub, 2)}')
    await callback_query.answer()

if __name__ == '__main__':
    print('Bot polling')
    executor.start_polling(dp)